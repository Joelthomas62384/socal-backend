name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "FRONT_END=${{ secrets.FRONT_END }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "CELERY_BROKER_URL=redis://redis:6379/0" >> .env
          echo "CELERY_RESULT_BACKEND=redis://redis:6379/0" >> .env

      - name: Build and push Docker images
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mysite-web:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/mysite-web:${{ github.sha }}

          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mysite-celery:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/mysite-celery:${{ github.sha }}

      - name: Run Docker Compose for tests
        run: |
          docker-compose --env-file .env up -d
          # Run Django tests
          docker-compose exec web python manage.py test
          docker-compose down

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_KEY }}

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.AWS_EC2_IP }} << 'EOF'
            # Docker login
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            # Pull latest images
            docker pull $DOCKER_USERNAME/mysite-web:${{ github.sha }}
            docker pull $DOCKER_USERNAME/mysite-celery:${{ github.sha }}

            # Stop existing containers and clean up
            docker-compose down || true

            # Create .env file
            cat <<EOT > .env
            GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
            FRONT_END=$FRONT_END
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            POSTGRES_HOST=$POSTGRES_HOST
            POSTGRES_PASSWORD=$POSTGRES_PASSWORD
            POSTGRES_USER=$POSTGRES_USER
            POSTGRES_DB=$POSTGRES_DB
            DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
            DATABASE_URL=$DATABASE_URL
            DEBUG=$DEBUG
            CELERY_BROKER_URL=redis://redis:6379/0
            CELERY_RESULT_BACKEND=redis://redis:6379/0
            EOT

            # Start containers
            docker-compose up -d --no-build

            # Clean up unused Docker images
            docker image prune -f
          EOF
