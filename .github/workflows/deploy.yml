name: Deploy Django App to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Create .env file with secrets
      - name: Create .env File from Secrets
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" > .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> .env
          echo "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" >> .env
          echo "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> .env
          echo "AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }}" >> .env
          echo "AZURE_DATABASE_URL=${{ secrets.AZURE_DATABASE_URL }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "FRONT_END=${{ secrets.FRONT_END }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env

      # Docker login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          # Build and push the web service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest --build-arg SERVICE=web .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

          # Build and push the Celery service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest --build-arg SERVICE=celery .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

      # Deploy to Azure VM using Docker Run
      - name: Deploy to Azure VM
        env:
          AZURE_PEM_KEY: ${{ secrets.AZURE_PEM_KEY }}
          AZURE_HOST: ${{ secrets.AZURE_HOST }}
          AZURE_USER: ${{ secrets.AZURE_USER }}
        run: |
          # Create SSH key file
          echo "$AZURE_PEM_KEY" > azure-key.pem
          chmod 600 azure-key.pem

          # Transfer the .env file to Azure VM
          scp -o StrictHostKeyChecking=no -i azure-key.pem .env "$AZURE_USER@$AZURE_HOST:/home/$AZURE_USER/.env"

          # Connect to Azure VM and deploy
          ssh -o StrictHostKeyChecking=no -i azure-key.pem "$AZURE_USER@$AZURE_HOST" << EOF
            set -e
            echo "Starting deployment on Azure VM..."

            # Docker login
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Stop and remove existing containers if they exist
            docker rm -f friendbook_web || true
            docker rm -f friendbook_celery || true

            # Cleanup unused Docker resources
            docker system prune -a -f

            # Pull the latest Docker images
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

            # Start Docker network if it doesn't exist
            docker network create friendbook-network || true

            # Start the Redis container
            echo "Starting Redis container..."
            docker run -d --name redis --network friendbook-network -p 6379:6379 redis:alpine

            # Start the Django container
            echo "Starting Django container..."
            docker run -d --name friendbook_web \
              --network friendbook-network \
              -p 8000:8000 \
              --env-file /home/$AZURE_USER/.env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

            # Start the Celery worker container
            echo "Starting Celery worker container..."
            docker run -d --name friendbook_celery \
              --network friendbook-network \
              --env-file /home/$AZURE_USER/.env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest \
              celery -A mysite worker --loglevel=info

            echo "Deployment complete on Azure VM!"
          EOF
