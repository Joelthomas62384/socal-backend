name: CI/CD Pipeline for Django Project

on:
  push:
    branches:
      - main  # Deploy when code is pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the latest code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH Key for EC2 access
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.AWS_EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

      # Step 3: Create .env file from GitHub Secrets
      - name: Create .env File
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "FRONT_END=${{ secrets.FRONT_END }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env

      # Step 4: Build and push Docker image
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build Docker Image
        run: docker build -t $DOCKER_USERNAME/friendbook:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push $DOCKER_USERNAME/friendbook:latest

      # Step 5: Copy files to EC2 instance
      - name: Copy Files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            .env docker-compose.yml nginx/nginx.conf \
            ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/

      # Step 6: Deploy on EC2
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
            cd /home/ubuntu

            # Stop existing containers and pull the latest Docker image
            docker-compose down
            docker-compose pull
            docker-compose up -d --build

            # Clean up unused Docker images
            docker image prune -f
          EOF
