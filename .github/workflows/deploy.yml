name: Deploy Django App to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create .env File from Secrets
        run: |
          echo "AZURE_ACCOUNT_KEY=${{ secrets.AZURE_ACCOUNT_KEY }}" > .env
          echo "AZURE_ACCOUNT_NAME=${{ secrets.AZURE_ACCOUNT_NAME }}" >> .env
          echo "AZURE_CONNECTION_STRING=${{ secrets.AZURE_CONNECTION_STRING }}" >> .env
          echo "AZURE_MEDIA_CONTAINER=${{ secrets.AZURE_MEDIA_CONTAINER }}" >> .env
          echo "AZURE_STATIC_CONTAINER=${{ secrets.AZURE_STATIC_CONTAINER }}" >> .env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> .env
          echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          # Build and push images for each service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest --build-arg SERVICE=web .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest --build-arg SERVICE=celery .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

      - name: Deploy to Azure VM using Docker Run
        env:
            VM_KEY: ${{ secrets.VM_KEY }}
            VM_IP: ${{ secrets.VM_IP }}
            VM_USER: ${{ secrets.VM_USER }}
        run: |
            # Create SSH key file
            echo "$VM_KEY" > azure-vm-key.pem
            chmod 600 azure-vm-key.pem

            # Transfer the .env file to the Azure VM
            scp -o StrictHostKeyChecking=no -i azure-vm-key.pem .env "$VM_USER@$VM_IP:/home/$VM_USER/.env"

            # Connect to Azure VM instance and deploy
            ssh -o StrictHostKeyChecking=no -i azure-vm-key.pem "$VM_USER@$VM_IP" << EOF
              set -e
              echo "Starting deployment on Azure VM..."

              # Docker login
              echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

              # Stop and remove existing containers if they exist
              docker rm -f friendbook_web || true
              docker rm -f friendbook_celery || true

              docker system prune -a -f

              # Pull the latest Docker images
              docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest
              docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

              echo "Starting Django container..."
              docker run -d --rm --name friendbook_web -p 8000:8000 \
                --env-file /home/$VM_USER/.env \
                ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

              echo "Starting Celery worker container..."
              docker run -d --rm --name friendbook_celery \
                --env-file /home/$VM_USER/.env \
                ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest \
                celery -A mysite worker --loglevel=info 

              echo "Deployment complete!"
            EOF

      - name: Print Frontend URL
        run: |
          echo "Frontend URL: ${{ secrets.FRONT_END }}"
