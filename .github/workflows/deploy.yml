name: Deploy on AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Docker Hub Login
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/friendbook:latest

    # Step 5: Set Up SSH Key for EC2 Access
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.AWS_EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

    # Step 6: Deploy on AWS EC2
    - name: Deploy on AWS EC2
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        FRONT_END: ${{ secrets.FRONT_END }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << EOF
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker pull $DOCKER_USERNAME/friendbook:latest
          docker stop friendbook || true
          docker rm friendbook || true
          docker run -d --name friendbook -p 80:8000 \
            -e DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY" \
            -e DATABASE_URL="$DATABASE_URL" \
            -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            -e GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
            -e GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \
            -e FRONT_END="$FRONT_END" \
            -e POSTGRES_HOST="$POSTGRES_HOST" \
            -e POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            $DOCKER_USERNAME/friendbook:latest
        EOF
