name: Deploy Django App to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create backend directory and .env File from Secrets
        run: |
          mkdir -p backend  # Ensure the backend directory exists
          echo "DEBUG=True" > backend/.env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> backend/.env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> backend/.env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> backend/.env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> backend/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> backend/.env
          echo "CELERY_BROKER_URL=redis://redis:6379/0" >> backend/.env
          echo "CELERY_RESULT_BACKEND=redis://redis:6379/0" >> backend/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> backend/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> backend/.env

      - name: Build Docker Images
        run: docker-compose -f backend/docker-compose.yaml build

      - name: Export EC2 Key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Deploy Docker Compose to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_IP: ${{ secrets.AWS_EC2_IP }}
        run: |
          # Create directory on EC2 if it doesn't exist
          ssh -t -o StrictHostKeyChecking=no -i ec2-key.pem "$EC2_USER@$EC2_IP" "mkdir -p /home/$EC2_USER/app/backend"

          # Upload backend directory to EC2
          scp -o StrictHostKeyChecking=no -i ec2-key.pem -r backend "$EC2_USER@$EC2_IP:/home/$EC2_USER/app/"

          # SSH into EC2 and deploy
          ssh -t -o StrictHostKeyChecking=no -i ec2-key.pem "$EC2_USER@$EC2_IP" << 'EOF'
            cd app/backend
            docker-compose down
            docker-compose up -d --build
          EOF

      - name: Clean Up
        run: rm -f ec2-key.pem
