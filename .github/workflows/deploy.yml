name: Deploy Django App to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create .env File from Secrets
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" > .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "EC2_USER=${{ secrets.EC2_USER }}" >> .env
          echo "FRONT_END=${{ secrets.FRONT_END }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          # Build and push images for each service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest --build-arg SERVICE=celery .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_celery_beat:latest --build-arg SERVICE=celery-beat .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_celery_beat:latest

      - name: Deploy to EC2 using Docker Run
        env:
          EC2_PEM_KEY: ${{ secrets.AWS_EC2_KEY }}
          EC2_HOST: ${{ secrets.AWS_EC2_IP }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Create SSH key file
          echo "$EC2_PEM_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem

          # Connect to EC2 instance and deploy
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem "$EC2_USER@$EC2_HOST" << EOF
            set -e
            echo "Starting deployment on EC2..."

            # Docker login
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_celery_beat:latest

            # Stop and remove existing containers if they are running
            docker stop friendbook_web friendbook_celery friendbook_celery_beat || true
            docker rm friendbook_web friendbook_celery friendbook_celery_beat || true

            # Run Django web container
            docker run -d --name friendbook_web -p 80:8000 \
              --env-file .env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

            # Run Celery worker container
            docker run -d --name friendbook_celery \
              --env-file .env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

            # Run Celery Beat container
            docker run -d --name friendbook_celery_beat \
              --env-file .env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_celery_beat:latest

            echo "Deployment complete!"
          EOF

      - name: Clean Up
        run: rm -f ec2-key.pem
